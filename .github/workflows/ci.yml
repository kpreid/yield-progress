name: Build & Test

permissions: {}

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main
      - ci

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation because we aren't caching incremental compilation
  # artifacts, so they won't be useful for anything.
  CARGO_INCREMENTAL: 0

jobs:
  test:
    strategy:
      matrix:
        toolchain: [stable, 1.63.0, beta, nightly]
        features: ['', 'sync', 'sync,log_hiccups']

    runs-on: ubuntu-latest
    continue-on-error: "${{ matrix.toolchain != 'nightly' && matrix.toolchain != 'beta' }}"

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      # Install exactly what we need: compiler, Cargo, clippy
      run: |
          rustup toolchain install "${{ matrix.toolchain }}" --profile=minimal --component=clippy
          rustup target add --toolchain="${{ matrix.toolchain }}" wasm32-unknown-unknown
          rustup override set "${{ matrix.toolchain }}"

    # Load cache before doing any Rust builds
    - uses: Swatinem/rust-cache@v2.7.3
      with:
        # Split by toolchain to avoid collisions.
        # We'll still collide on features, but that should be mostly okay and save some disk.
        prefix-key: "v1-rust-${{ matrix.toolchain }}"

    - name: Lint
      run: |
        cargo clippy --timings
        cargo rustdoc -- -Drustdoc::broken_intra_doc_links

    - name: Compile
      # compile is broken out so we have visibility into compile vs. run times
      run: cargo test --no-default-features --features="${{ matrix.features }}" --timings --no-run

    - name: Run tests
      run: cargo test --no-default-features --features="${{ matrix.features }}" --timings

    - name: Compile on Wasm
      # We don't yet have tests that can run on Wasm, but this will check for compile success.
      # Examples can't all build on Wasm, so no --all-targets.
      run: cargo build --no-default-features --features="${{ matrix.features }}" --target wasm32-unknown-unknown

    - name: Update
      run: cargo update

    - name: Compile with updates
      run: cargo test --no-default-features --features="${{ matrix.features }}" --timings --no-run

    - name: Test with updates
      run: cargo test --no-default-features --features="${{ matrix.features }}" --timings

    # Save timing reports so we can download and view them
    # (for understanding build performance in CI)
    - name: Save cargo --timings output
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: cargo-timings ${{ matrix.toolchain }}
        path: |
          target/cargo-timings/cargo-timing-*.html

  no_std:
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      run: |
          rustup toolchain install stable --profile=minimal --component=clippy
          rustup target add --toolchain=stable thumbv7em-none-eabihf
          rustup override set stable

    - uses: Swatinem/rust-cache@v2.7.3
  
    - name: Compile
      run: cargo build --no-default-features --target thumbv7em-none-eabihf --timings

    - name: Lint
      run: |
        cargo clippy --timings
        cargo rustdoc -- -Drustdoc::broken_intra_doc_links

  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4  
    # GitHub runners already have rustfmt installed.
    - run: cargo fmt --check --all

  semver:
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v4
  
    - uses: Swatinem/rust-cache@v2.7.3
  
    - name: Check semver
      uses: obi1kenobi/cargo-semver-checks-action@v2
      # Use workspace target dir for cargo install's build, so that the build will be cached.
      env:
        CARGO_TARGET_DIR: target/
